// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Post from "./post.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as NewBlock from "./NewBlock.bs.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as OriginalBlock from "./OriginalBlock.bs.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";

function s(prim) {
  return prim;
}

function reducer(state, action) {
  switch (action.TAG | 0) {
    case /* DeleteLater */0 :
        return {
                posts: state.posts,
                forDeletion: Belt_MapString.set(state.forDeletion, Post.id(action._0), action._1)
              };
    case /* DeleteAbort */1 :
        var post = action._0;
        var intervalId = Belt_MapString.get(state.forDeletion, Post.id(post));
        if (intervalId !== undefined) {
          clearTimeout(Caml_option.valFromOption(intervalId));
        } else {
          console.log("Some error occurred");
        }
        return {
                posts: state.posts,
                forDeletion: Belt_MapString.remove(state.forDeletion, Post.id(post))
              };
    case /* DeleteNow */2 :
        var post$1 = action._0;
        var intervalId$1 = Belt_MapString.get(state.forDeletion, Post.id(post$1));
        if (intervalId$1 !== undefined) {
          clearTimeout(Caml_option.valFromOption(intervalId$1));
        } else {
          console.log("Some error occurred");
        }
        var match = Belt_Array.partition(state.posts, (function (x) {
                return Caml_obj.caml_notequal(x, post$1);
              }));
        return {
                posts: match[0],
                forDeletion: Belt_MapString.remove(state.forDeletion, Post.id(post$1))
              };
    
  }
}

var initialState = {
  posts: Post.examples,
  forDeletion: undefined
};

function PostFeed(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var elements = Belt_Array.map(state.posts, (function (post) {
          if (Belt_MapString.has(state.forDeletion, Post.id(post))) {
            return React.createElement(NewBlock.make, {
                        post: post,
                        restoreHandle: (function (_mouseEvt) {
                            return Curry._1(dispatch, {
                                        TAG: /* DeleteAbort */1,
                                        _0: post
                                      });
                          }),
                        deleteHandle: (function (_mouseEvt) {
                            return Curry._1(dispatch, {
                                        TAG: /* DeleteNow */2,
                                        _0: post
                                      });
                          }),
                        key: Post.id(post)
                      });
          } else {
            return React.createElement(OriginalBlock.make, {
                        post: post,
                        deleteHandle: (function (_mouseEvt) {
                            return Curry._1(dispatch, {
                                        TAG: /* DeleteLater */0,
                                        _0: post,
                                        _1: setTimeout((function (param) {
                                                return Curry._1(dispatch, {
                                                            TAG: /* DeleteNow */2,
                                                            _0: post
                                                          });
                                              }), 10000)
                                      });
                          }),
                        key: Post.id(post)
                      });
          }
        }));
  return React.createElement("div", {
              className: "max-w-3xl mx-auto mt-8 relative"
            }, elements);
}

var make = PostFeed;

export {
  s ,
  reducer ,
  initialState ,
  make ,
  
}
/* Post Not a pure module */
